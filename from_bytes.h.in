/*
 * from_bytes.h.in
 *
 * Copyright 2017 Andrea Fioraldi <andreafioraldi@gmail.com>
 *
 * This file is part of Tripel Virtual Machine.
 *
 * Tripel Virtual Machine is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * Tripel Virtual Machine is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 *
 */

#ifndef __TVM__FROM_BYTES_H
#define __TVM__FROM_BYTES_H

//Placed by CMAKE script
${LITTLE_ENDIAN_DEFINITION}

#ifdef LITTLE_ENDIAN

#define tvm_short_from_bytes(buf) \
    (buf+=2, *(jit_short*)buf)

#define tvm_ushort_from_bytes(buf) \
    ((buf)+=2, *(jit_ushort*)(buf))

#define tvm_int_from_bytes(buf) \
    ((buf)+=4, *(jit_int*)(buf))

#define tvm_uint_from_bytes(buf) \
    ((buf)+=4, *(jit_uint*)(buf))

#define tvm_long_from_bytes(buf) \
    ((buf)+=8, *(jit_long*)(buf))
    
#define tvm_ulong_from_bytes(buf) \
    ((buf)+=8, *(jit_ulong*)(buf))

#define tvm_float32_from_bytes(buf) \
    ((buf)+=4, *(jit_float32*)(buf))

#define tvm_float64_from_bytes(buf) \
    ((buf)+=8, *(jit_float64*)(buf))

#else

/*Helper macro to get a byte from buf and increment *buf*/
#define __NEXT_BYTE(type) ((type)((*buf)++) & 0xFF)

static jit_ulong __tvm_ulong_from_bytes
    (unsigned char** buf)
{
    jit_ulong result = __NEXT_BYTE(jit_ulong);
    result |= __NEXT_BYTE(jit_ulong) << 8;
    result |= __NEXT_BYTE(jit_ulong) << 16;
    result |= __NEXT_BYTE(jit_ulong) << 24;
    result |= __NEXT_BYTE(jit_ulong) << 36;
    result |= __NEXT_BYTE(jit_ulong) << 40;
    result |= __NEXT_BYTE(jit_ulong) << 48;
    result |= __NEXT_BYTE(jit_ulong) << 56;
    return result;
}

static jit_long __tvm_long_from_bytes
    (unsigned char** buf)
{
    jit_long result = __NEXT_BYTE(jit_long);
    result |= __NEXT_BYTE(jit_long) << 8;
    result |= __NEXT_BYTE(jit_long) << 16;
    result |= __NEXT_BYTE(jit_long) << 24;
    result |= __NEXT_BYTE(jit_long) << 36;
    result |= __NEXT_BYTE(jit_long) << 40;
    result |= __NEXT_BYTE(jit_long) << 48;
    result |= __NEXT_BYTE(jit_long) << 56;
    return result;
}

static jit_uint __tvm_uint_from_bytes
    (unsigned char** buf)
{
    jit_uint result = __NEXT_BYTE(jit_uint);
    result |= __NEXT_BYTE(jit_uint) << 8;
    result |= __NEXT_BYTE(jit_uint) << 16;
    result |= __NEXT_BYTE(jit_uint) << 24;
    return result;
}

static jit_int __tvm_int_from_bytes
    (unsigned char** buf)
{
    jit_int result = __NEXT_BYTE(jit_int);
    result |= __NEXT_BYTE(jit_int) << 8;
    result |= __NEXT_BYTE(jit_int) << 16;
    result |= __NEXT_BYTE(jit_int) << 24;
    return result;
}

static jit_ushort __tvm_ushort_from_bytes
    (unsigned char** buf)
{
    jit_ushort result = __NEXT_BYTE(jit_ushort);
    result |= __NEXT_BYTE(jit_ushort) << 8;
    return result;
}

static jit_short __tvm_short_from_bytes
    (unsigned char** buf)
{
    jit_short result = __NEXT_BYTE(jit_short);
    result |= __NEXT_BYTE(jit_short) << 8;
    return result;
}

static jit_float32 __tvm_float32_from_bytes
    (unsigned char** buf)
{
    jit_uint tmp = __tvm_uint_from_bytes(buf);
    return *((jit_float32*)&tmp);
}

static jit_float64 __tvm_float64_from_bytes
    (unsigned char** buf)
{
    jit_ulong tmp = __tvm_ulong_from_bytes(buf);
    return *((jit_float64*)&tmp);
}

#define tvm_short_from_bytes(buf) \
    __tvm_short_from_bytes(&buf)

#define tvm_ushort_from_bytes(buf) \
    __tvm_ushort_from_bytes(&buf)

#define tvm_int_from_bytes(buf) \
    __tvm_int_from_bytes(&buf)

#define tvm_uint_from_bytes(buf) \
    __tvm_uint_from_bytes(&buf)

#define tvm_long_from_bytes(buf) \
    __tvm_long_from_bytes(&buf)
    
#define tvm_ulong_from_bytes(buf) \
    __tvm_ulong_from_bytes(&buf)

#define tvm_float32_from_bytes(buf) \
    __tvm_float32_from_bytes(&buf)

#define tvm_float64_from_bytes(buf) \
    __tvm_float64_from_bytes(&buf)

#endif
#endif
